defaultStorageMapping: TARGET_DB
installedPackages: {}
jobs: {}
locations:
  SOURCE_DATA:
    mappingDefinitions:
      "149":
        database: ANANDHIS_DEV
        schema: SOURCE_DATA
      "150":
        database: ANANDHIS_DEV
        schema: SOURCE_DATA
  TARGET_DB:
    mappingDefinitions:
      "149":
        database: ANANDHIS_DEV
        schema: TARGET_DEV
      "150":
        database: ANANDHIS_DEV
        schema: TARGET_QA
  TARGET_DEV:
    mappingDefinitions:
      "149":
        database: ANANDHIS_DEV
        schema: TARGET_DEV
      "150":
        database: ANANDHIS_DEV
        schema: TARGET_DEV
macros:
  Macro-1:
    id: "1"
    macroString: |-
      {#-- The below block of code initialises variables in case of node typess using advance deployment strategy #}
      
      {% if desiredState %}
          {% set columns = desiredState.columns %}
          {% set storageLocations = desiredState.storageLocations %}
          {% set config = desiredState.config %}
          {% set sources = desiredState.sources %}
          {% set node = desiredState.node %}
          {% set parameters = desiredState.parameters %}
      {% endif %}
      
      
      {#-- This macro will frame the order by clause with the columns and sort order specified in config #}
      {#-- Input parmeters   - None #}
      {#-- Return            - Order by clause #}
      
      {%- macro sortorder_by_colv(return) -%}
          {%- set nsVariables = namespace(sortcolNames="") -%}
          {%if config.orderby %}
              {%- for i in config.orderbycolumn.get('items') -%}
                  {%- set colName = i.sortColName.name -%}
                  {%- set colOrder = i.sortOrder -%}
      	        {%- if loop.first -%}	      
      		        {%- set nsVariables.sortcolNames = '"' + colName + '"' + colOrder -%}	  
      	        {%- else -%}      
      		        {%- set nsVariables.sortcolNames = nsVariables.sortcolNames + ',' + '"' + colName + '"' + colOrder-%}	  
      	        {%- endif -%}
              {%- endfor -%}	
                  {%- set nsVariables.sortcolNames = 'order by' + nsVariables.sortcolNames -%}
       
          {% endif %} 
          
          {{- nsVariables.sortcolNames -}}
       
      {%- endmacro -%}
      
      
      
      {#-- This macro will split the join clause into from and rest of the clauses like where,groupby,orderby ,qualify  #}
      {#-- Input parmeters   - joinclause #}
      {#-- Return            - from clause and other clauses #}
      
      
      {%- macro get_clause( joinclause , ret_clause ) -%}
      
                  {% set join_clause = joinclause %}
                  {% set has_where_clause = 'where'in join_clause %}
                  {% set has_WHERE_clause = 'WHERE'in join_clause %}
                  {% set has_order_clause = 'order by'in join_clause %}
                  {% set has_ORDER_clause = 'ORDER BY'in join_clause %}
                  {% set has_group_clause =  'group by'in join_clause %}
                  {% set has_GROUP_clause = 'GROUP BY'in join_clause %}
                  {% set has_qualify_clause =  'qualify'in join_clause %}
                  {% set has_QUALIFY_clause = 'QUALIFY'in join_clause %}
      
                 
      
                  {% set clause='default' %}
      
                  {% if has_where_clause %}
      
                      {% set keyword='where'%} 
                      {% set clause='where_clause' %}
        
                  {% elif  has_WHERE_clause %}
      
                       {% set keyword='WHERE'%}
                       {% set clause='where_clause' %}
                  {% endif %}
      
                  {% if has_group_clause and clause != 'where_clause'  %}
      
                       {% set keyword='group by'%}
                       {% set clause='group_clause' %}
                  
                  {% elif  has_GROUP_clause and clause != 'where_clause' %}
      
                       {% set keyword='GROUP BY'%}
                       {% set clause='group_clause' %}
      
                  {% endif %}
      			
                  {% if has_qualify_clause and clause != 'where_clause' and clause != 'group_clause'  %}
      
                       {% set keyword='qualify'%}
                       {% set clause='qualify_clause' %}
                  
                  {% elif  has_QUALIFY_clause and clause != 'where_clause' and clause != 'group_clause'  %}
      
                       {% set keyword='QUALIFY'%}
                       {% set clause='qualify_clause' %}
      
                  {% endif %}            
      
      			{% if has_order_clause and  clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}
      
                       {% set keyword='order by'%}
                       {% set clause='order_clause' %}
                  
                  {% elif has_ORDER_clause and clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}
      
                       {% set keyword='ORDER BY'%}
                       {% set clause='order_clause' %}
      
                  {% endif %}
      
      
      
                  {% if clause == 'where_clause' %}
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'AND' + join_clause.split(keyword)[1] %}
      
                  {% elif clause == 'group_clause' %}
      
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'group by' + join_clause.split(keyword)[1] %}
      
                  
                  {% elif clause == 'qualify_clause' %}
      
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'qualify' + join_clause.split(keyword)[1] %}
      
      
                  {% elif clause == 'order_clause' %}
      
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause =  'order by' + join_clause.split(keyword)[1] %}
                     
      
                  {% else %}
      
                     {% set from_clause = join_clause %}
                     {% set add_clause = '' %}
      
                  {% endif %}
      			
      			{% if ret_clause == 'from' %}
      			   {{ from_clause }}
      			{% else %}
      			   {{ add_clause }}
      			{% endif %}
      			
      			
      {%- endmacro -%}
packages: {}
projects: {}
stepTypes:
  StepType-162:
    id: "162"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Fact Advanced Deploy
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        deployStrategy: advanced

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
            - transient table

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - type: multisourceToggle
            enableIf: "{% if node.override.create.enabled %} false {% else %} true {% endif %}"

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION ALL
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: false
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if node.materializationType == 'table' or node.materializationType == 'transient table'  %} true {% else %} false {% endif %}"

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: false
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"
            
          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            default: false
            enableIf: "{% if config.groupByAll or  node.override.create.enabled %} %} false {% else %} true {% endif %}"

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            default: false
            enableIf: "{% if config.selectDistinct or  node.override.create.enabled %} %} false {% else %} true {% endif %}"   

          - displayName: Order By
            attributeName: orderby
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - type: tabular
            displayName: 'Sort column'
            attributeName: orderbycolumn
            columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
            isRequired: true
            enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Fact Advanced Deploy == #}
            {# == Node Type Description    : This node creates fact table,view and also override create sql for view with Advanced Deploy Strategy == #}


            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}

                {% if  desiredState.node.override.create.enabled and desiredState.node.materializationType == 'view' %}
            	
            	    {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'view' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}
                            DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

            	      {{ desiredState.node.override.create.script }}


                {%elif desiredState.node.materializationType == 'view' %}

                    {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'view' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}
                            DROP TABLE IF EXISTS{{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

            		{{ stage('Create Fact View') }}

            		CREATE OR REPLACE VIEW {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            		(
            			{% for col in desiredState.columns %}
            				"{{ col.name }}"
            				{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            				{%- if not loop.last -%},{% endif %}
            			{% endfor %}
            		)
            		{%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
            		AS
            		{% for source in desiredState.sources %}

            			SELECT{% if desiredState.config.selectDistinct %} DISTINCT {% endif %} 
                        
            			{% for col in source.columns %}
            				{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
            					NULL
            				{% else %}
            					{{ get_source_transform(col) }}
            				{% endif %}
            				AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            			{{ source.join }}            
                        {% if desiredState.config.groupByAll %}
            		       Group By All
            	         {% endif %}
            			{% if not loop.last %}                 
                           {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% else %}
                                UNION
                            {% endif %}
                        {% endif %}
            		{% endfor %}

            {% elif desiredState.node.materializationType == 'table' or desiredState.node.materializationType == 'transient table' %}


                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {% if currentState != undefined and currentState.node.materializationType != desiredState.node.materializationType %}

                             {# Change in materialization type #}
                            
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}

                             {% if currentState.node.materializationType == 'view' %} 
                                  DROP {{currentState.node.materializationType}} IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            {% else %}
                                  DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            {% endif %}

                         {{ stage('Create Fact ' + desiredState.node.materializationType , true, "sql", "create") }}
            			  CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        (
                            {% for col in desiredState.columns %}
                                "{{ col.name }}" {{ col.dataType }}
                                {%- if not col.nullable %} NOT NULL
                                    {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                        )
            			{%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                        {% if desiredState.config.clusterKey == true %}
                            {{ stage('Apply Table Clustering', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                            {{ stage('Resume Recluster Table', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                        {% endif %}


                    {% endif %}


                    {% if currentState == undefined %}
                        {{ stage('Create Fact ' + desiredState.node.materializationType , true, "sql", "create") }}
            			CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        (
                            {% for col in desiredState.columns %}
                                "{{ col.name }}" {{ col.dataType }}
                                {%- if not col.nullable %} NOT NULL
                                    {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                        )
            			{%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                        {% if desiredState.config.clusterKey == true %}
                            {{ stage('Apply Table Clustering', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                            {{ stage('Resume Recluster Table', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                        {% endif %}

                    {% elif currentState != undefined and currentState.node.materializationType == desiredState.node.materializationType %}

                        {# Change Node Name or Change Storage Location #}
                        {# Storage Location Tests #}
                        {# Only need to account for updated Storage Location mappings   #}
                        {# Current Namespace Varialbes #}
                        {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                        {# Current State Storage Location Info #}
                        {% for source in currentState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                        {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                        {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                        {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                        {# Desired Namespace Variables #}
                        {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                        {% set nsVariables = namespace(storageLocationTest="") %}

                        {# Desired State Storage Location Info #}
                        {% for source in desiredState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                        {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                        {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                        {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                        {# Test  #}
                        {% set nsVariables.storageLocationTest = true %}
                        {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                            {# Current mappings #}
                            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                            
                            {# Desired mappings #}
                            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                            {% if currentDatabaseSchema != desiredDatabaseSchema %}
                                {% set nsVariables.storageLocationTest = false %}
                            {% endif %}
                        {% endfor %}

                        {# Clustering Test #}
                        {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                        {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                        {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                        {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                        {% if 
                            clusterKeyTest == false or
                            clusterKeyExpressionsTest == false or
                            clusterKeyConfigTest == false or
                            clusterKeyConfigExpressionsTest == false %}

                            {% set clusterTest = false %}
                        {% else %}
                            {% set clusterTest = true %}
                        {% endif %}

                        {# Rename / Move Object #}
                        {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                            {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                            ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {% endif %}

                        {# Change table description #}
                        {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                             {{ stage('Change table description', true, "sql", "alter") }}
                             ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            SET COMMENT = '{{ desiredState.node.description | escape }}'
                        {% endif %}

                        {# Drop Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for dropCurCol in currentState.columns %}
                            {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Drop Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    DROP COLUMN 
                                {% else %}
                                    , 
                                {% endif %}
                                "{{ dropCurCol.name }}"
                            {% endif %}
                        {% endfor %}

                        {# Add Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for addDesCol in desiredState.columns %}
                            {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Add Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    ADD COLUMN
                                {% else %}
                                    ,
                                {% endif %}
                                    "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                    {%- if not addDesCol.nullable %} NOT NULL
                                        {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Rename Columns #}
                        {% for renameCurCol in currentState.columns %}
                            {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                                {% if renameCurCol.name != desiredColumnName %}
                                    {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    RENAME COLUMN "{{ renameCurCol.name }}"
                                    TO "{{ desiredColumnName }}"
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Change data types etc #}
                        {% set nsVariables.colchanges = 0 %}
                        {% for alterCurCol in currentState.columns %}        
                            {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set currentDatatype = alterCurCol.dataType %}
                                {% set currentNullable = alterCurCol.nullable %}
                                {% set currentDefaultValue = alterCurCol.defaultValue %}
                                {% set currentDescription = alterCurCol.description %}

                                {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                                {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                                {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                                {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                                {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                                {% set datatypeTest = currentDatatype == desiredDatatype %}
                                {% set nullableTest = currentNullable == desiredNullable %}
                                {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                                {% set descriptionTest = currentDescription == desiredDescription %}

                                {% if (datatypeTest == false or 
                                        nullableTest == false  or
                                        defaultValueTest == false or
                                        descriptionTest == false) %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                    {% if nsVariables.colchanges == 1 %}
                                        {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                        MODIFY
                                    {% endif %}
                                    {% if datatypeTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        SET DATA TYPE {{ desiredDatatype }}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if nullableTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if currentNullable == true %}
                                            SET
                                        {% else %}
                                            DROP
                                        {% endif %}
                                        NOT NULL
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if descriptionTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        COMMENT '{{ desiredDescription }}'
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if defaultValueTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if desiredDefaultValue == '' %}
                                            DROP DEFAULT
                                        {% else %}
                                            SET DEFAULT {{ desiredDefaultValue }}
                                        {% endif %}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    
                                {% else %}
                                                        
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Figure out cluster key #}
                        {% set nsVariables = namespace(finalClusterKey="") %}
                        {% if clusterTest == false %}
                            {% if desiredState.config.clusterKeyExpressions == true %}
                                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% if expression[loop.index0] == "" %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                    {% else %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                    {% endif %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                            {% elif desiredState.config.clusterKey == true %}

                                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                            
                            {% else %}

                                {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                            {% endif %}

                            {{ stage('Recluster TABLE', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            {{ nsVariables.finalClusterKey }}

                        {% endif %}

                    {% endif %}


                {% endif %}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {% if currentState.node.materializationType == 'view' %}

                 {{ stage('Drop Table or View', true, "sql", "drop") }}
                 DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

                {% else %}
                 
                   {{ stage('Drop ' + currentState.node.materializationType , true, "sql", "drop") }}
                   DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

                {% endif %}

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Fact Advance Deploy == #}
            {# == Node Type Description    : This node loads data into  fact table using config options distinct,groupby all,order by ,multi-source  == #}

            {# == To run data quality tests before data insertion == #}

            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' or node.materializationType == 'transient table' %}

                {# == Queries to be excuted before data insertion  == #}

                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                
                {# == Truncate data before data insertion  == #}

                    {% if config.truncateBefore %}
                        {{ stage('Truncate Fact Table') }}
                        TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
                    {% endif %}
                    
                {# == Check if business key is specified  == #}

                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}    
                    
                        {% if has_business_key %}

                        {# == Executed if business key is specified  == #}

                    
                            {{ stage('MERGE ' + ' Sources' | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                            
                            {% for source in sources %}
                                (SELECT
                                {% if config.selectDistinct %}
                                DISTINCT
                                {% endif %}
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                                {% if config.groupByAll %}
                                    GROUP BY ALL
                                {% endif %}
                                {{ sortorder_by_colv() }})
                                {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                    {{config.insertStrategy}}
                                {% endif %}
                            {% endfor %}   
                                )
                                AS "SRC"
                            ON
                            {% for col in columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}

                            THEN UPDATE SET
                            {%- for col in columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}

                           {# == Executed if business key is not specified  == #}

                            {{ stage('Insert ' + ' Sources' | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                            {% for source in sources %}
                                (SELECT
                                {% if config.selectDistinct %}
                                DISTINCT
                                {% endif %}
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                             {% if config.groupByAll %}
                                 GROUP BY ALL
                             {% endif %}
                             {{ sortorder_by_colv() }})
                             {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                 {{config.insertStrategy}}
                             {% endif %}
                            {% endfor %} 
                        {% endif %}

             {# == Queries to be excuted post data insertion  == #}

                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

            {# == To run data quality tests after data insertion == #}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
    name: Fact Advanced Deploy
    version: 1
  StepType-179:
    id: "179"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Work Advanced Deploy
        short: WRK
        plural: Stages
        tagColor: '#2EB67D'

        deployStrategy: advanced

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            - transient table
            isRequired: true

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if node.materializationType == 'table' or node.materializationType == 'transient table'  %} true {% else %} false {% endif %}"

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: false
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: multisourceToggle
            enableIf: "{% if node.override.create.enabled %} false {% else %} true {% endif %}" 
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            default: false
            enableIf: "{% if config.groupByAll or  node.override.create.enabled %} false {% else %} true {% endif %}"


          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            default: false
            enableIf: "{% if config.selectDistinct or  node.override.create.enabled %} false {% else %} true {% endif %}"


          - displayName: Order By
            attributeName: orderby
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - type: tabular
            displayName: 'Sort column'
            attributeName: orderbycolumn
            columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
            isRequired: true
            enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Work Advanced Deploy == #}
            {# == Node Type Description    : This node creates work table,view and also override create sql for view with advanced deployment strategy == #}



            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}

                {% if  desiredState.node.override.create.enabled and desiredState.node.materializationType == 'view' %}

                     {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'view' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}
                            DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

            	      {{ desiredState.node.override.create.script }}

                {%elif desiredState.node.materializationType == 'view' %}

                    {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'view' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}
                            DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

                    {{ stage('Create Work View', true, "sql", "create") }}

                    CREATE OR REPLACE VIEW {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
                    AS
                    {% for source in desiredState.sources %}
                        SELECT
                        {% if desiredState.config.selectDistinct %}
                          DISTINCT
                        {% endif %}
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}
                        {% if desiredState.config.groupByAll %}
            		       Group By All
            	         {% endif %}
                        {% if not loop.last %}
                            {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% else %}
                                UNION
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                {% elif desiredState.node.materializationType == 'table' or desiredState.node.materializationType == 'transient table'  %}
                    
                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}


                    {% if currentState != undefined and currentState.node.materializationType != desiredState.node.materializationType %}

                            {# Change in materialization type #}

                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}

                             {% if currentState.node.materializationType == 'view' %} 
                                  DROP {{currentState.node.materializationType}} IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            {% else %}
                                  DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            {% endif %}
                             
                            {{ stage('Create Work '+ ' {{desiredState.node.materializationType}}' , true, "sql", "create") }}
                           CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            (
                            {% for col in desiredState.columns %}
                                "{{ col.name }}" {{ col.dataType }}
                                {%- if not col.nullable %} NOT NULL
                                    {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                            )
                           {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                           {% if desiredState.config.clusterKey == true %}
                              {{ stage('Apply Table Clustering', true, "sql", "create") }}
                             ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                               {{ stage('Resume Recluster Table', true, "sql", "create") }}
                              ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER

                           {% endif %}
                            
                    {% endif %}

                    {% if currentState == undefined %}
                        {{ stage('Create Work '+ ' {{desiredState.node.materializationType}}' , true, "sql", "create") }}
                        CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        (
                            {% for col in desiredState.columns %}
                                "{{ col.name }}" {{ col.dataType }}
                                {%- if not col.nullable %} NOT NULL
                                    {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                        )
                        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Table Clustering', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                        {{ stage('Resume Recluster Table', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                    {% endif %}

                    {% elif currentState != undefined and currentState.node.materializationType == desiredState.node.materializationType %}

                        {# Change Node Name or Change Storage Location #}
                        {# Storage Location Tests #}
                        {# Only need to account for updated Storage Location mappings   #}
                        {# Current Namespace Varialbes #}
                        {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                        {# Current State Storage Location Info #}
                        {% for source in currentState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                        {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                        {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                        {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                        {# Desired Namespace Variables #}
                        {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                        {% set nsVariables = namespace(storageLocationTest="") %}

                        {# Desired State Storage Location Info #}
                        {% for source in desiredState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                        {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                        {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                        {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                        {# Test  #}
                        {% set nsVariables.storageLocationTest = true %}
                        {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                        {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                            {# Current mappings #}
                            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                            
                            {# Desired mappings #}
                            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                            {% if currentDatabaseSchema != desiredDatabaseSchema %}
                                {% set nsVariables.storageLocationTest = false %}
                            {% endif %}
                        {% endfor %}

                        {# Clustering Test #}
                        {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                        {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                        {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                        {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                        {% if 
                            clusterKeyTest == false or
                            clusterKeyExpressionsTest == false or
                            clusterKeyConfigTest == false or
                            clusterKeyConfigExpressionsTest == false %}

                            {% set clusterTest = false %}
                        {% else %}
                            {% set clusterTest = true %}
                        {% endif %}

                        {# Rename / Move Object #}
                        {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                            {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                            ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {% endif %}

                        {# Change table description #}
                        {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                             {{ stage('Change table description', true, "sql", "alter") }}
                             ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            SET COMMENT = '{{ desiredState.node.description | escape }}'
                        {% endif %}



                        {# Drop Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for dropCurCol in currentState.columns %}
                            {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Drop Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    DROP COLUMN 
                                {% else %}
                                    , 
                                {% endif %}
                                "{{ dropCurCol.name }}"
                            {% endif %}
                        {% endfor %}

                        {# Add Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for addDesCol in desiredState.columns %}
                            {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Add Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    ADD COLUMN
                                {% else %}
                                    ,
                                {% endif %}
                                    "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                    {%- if not addDesCol.nullable %} NOT NULL
                                        {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Rename Columns #}
                        {% for renameCurCol in currentState.columns %}
                            {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                                {% if renameCurCol.name != desiredColumnName %}
                                    {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    RENAME COLUMN "{{ renameCurCol.name }}"
                                    TO "{{ desiredColumnName }}"
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Change data types etc #}
                        {% set nsVariables.colchanges = 0 %}
                        {% for alterCurCol in currentState.columns %}        
                            {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set currentDatatype = alterCurCol.dataType %}
                                {% set currentNullable = alterCurCol.nullable %}
                                {% set currentDefaultValue = alterCurCol.defaultValue %}
                                {% set currentDescription = alterCurCol.description %}

                                {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                                {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                                {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                                {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                                {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                                {% set datatypeTest = currentDatatype == desiredDatatype %}
                                {% set nullableTest = currentNullable == desiredNullable %}
                                {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                                {% set descriptionTest = currentDescription == desiredDescription %}

                                {% if (datatypeTest == false or 
                                        nullableTest == false  or
                                        defaultValueTest == false or
                                        descriptionTest == false) %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                    {% if nsVariables.colchanges == 1 %}
                                        {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                        MODIFY
                                    {% endif %}
                                    {% if datatypeTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        SET DATA TYPE {{ desiredDatatype }}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if nullableTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if currentNullable == true %}
                                            SET
                                        {% else %}
                                            DROP
                                        {% endif %}
                                        NOT NULL
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if descriptionTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        COMMENT '{{ desiredDescription }}'
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if defaultValueTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if desiredDefaultValue == '' %}
                                            DROP DEFAULT
                                        {% else %}
                                            SET DEFAULT {{ desiredDefaultValue }}
                                        {% endif %}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    
                                {% else %}
                                                        
                                {% endif %}
                            {% endif %}
                        {% endfor %}
                        
                        {# Figure out cluster key #}
                        {% set nsVariables = namespace(finalClusterKey="") %}
                        {% if clusterTest == false %}
                            {% if desiredState.config.clusterKeyExpressions == true %}
                                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% if expression[loop.index0] == "" %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                    {% else %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                    {% endif %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                            {% elif desiredState.config.clusterKey == true %}

                                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                            
                            {% else %}

                                {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                            {% endif %}

                            {{ stage('Recluster TABLE', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            {{ nsVariables.finalClusterKey }}

                        {% endif %}

                    {% endif %}


                {% endif %}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
                
                {% if currentState.node.materializationType == 'view' %}

                 {{ stage('Drop Table or View', true, "sql", "drop") }}
                 DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

                {% else %}
                 
                   {{ stage('Drop ' + currentState.node.materializationType , true, "sql", "drop") }}
                   DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

                {% endif %}

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Work Advanced deploy == #}
            {# == Node Type Description    : This node loads data into work table using config options distinct,groupby all,order by ,multi-source == #}


             {# == To run data quality tests before data insertion == #}

            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' or node.materializationType == 'transient table'%}

             {# == Queries to be excuted before data insertion  == #}
             
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}	


            {# == Truncate data before data insertion  == #}
            	
            		{% if config.truncateBefore %}	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            		{% endif %}
            	
            {# == Multi-Source option  == #}
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
             			(SELECT
            			{% if config.selectDistinct %}
            			DISTINCT
            			{% endif %}
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
                             {% if config.groupByAll %}
                             GROUP BY ALL
                             {% endif %}
                             {{ sortorder_by_colv() }})
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}							 
            	
            		{% endfor %}

            {# == Queries to be excuted post data insertion  == #}
            			
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {# == To run data quality tests after data insertion == #}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Work Advanced Deploy
    version: 1
  StepType-180:
    id: "180"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage Advanced Deploy
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        deployStrategy: advanced

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - transient table
          
          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION ALL
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: false
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if node.materializationType == 'table' or node.materializationType == 'transient table' %} true {% else %} false {% endif %}"

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: false
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"
          
          - type: businessKeyColumns
            isRequired: false
          
          - type: changeTrackingColumns
            isRequired: false

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
           

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"
            

          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"
            default: false

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"
            default: false
            
          - displayName: Order By
            attributeName: orderby
            type: toggleButton
            default: false

          - type: tabular
            displayName: 'Sort column'
            attributeName: orderbycolumn
            columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
            isRequired: true
            enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"    

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"


          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"




        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |+
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           :  Persistent Stage Advanced Deploy == #}
            {# == Node Type Description    : This node creates Persistent stage tables with advanced deploy strategy  == #}


            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}

            {# CreateSQL for table #}

            {% if desiredState.node.materializationType == 'table' or desiredState.node.materializationType == 'transient table' %}

                        {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {% if currentState != undefined and currentState.node.materializationType != desiredState.node.materializationType %}

                         {# Change in materialization type #} 

                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}
                            DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}

                            {{ stage('Create Persistent Stage '+ desiredState.node.materializationType, true, "sql", "create") }}
            			   CREATE OR REPLACE {{ desiredState.node.materializationType }} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                           (
                            {% for col in desiredState.columns %}
                                "{{ col.name }}" {{ col.dataType }}
                                {%- if not col.nullable %} NOT NULL
                                    {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                            )
            			  {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                          {% if desiredState.config.clusterKey == true %}
                            {{ stage('Apply Table Clustering', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                            {{ stage('Resume Recluster Table', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                          {% endif %}
                
                    {% endif %}

                    {% if currentState == undefined %}

                    {{ stage('Create Persistent Stage' +' ' + desiredState.node.materializationType, true, "sql", "create") }}
                    CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {% if col.isSurrogateKey %}
                                identity
                            {% endif %}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Table Clustering', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                        {{ stage('Resume Recluster Table', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                    {% endif %}

                    {% elif currentState != undefined and currentState.node.materializationType == desiredState.node.materializationType %}

                        {# Change Node Name or Change Storage Location #}
                        {# Storage Location Tests #}
                        {# Only need to account for updated Storage Location mappings   #}
                        {# Current Namespace Varialbes #}
                        {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                        {# Current State Storage Location Info #}
                        {% for source in currentState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                        {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                        {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                        {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                        {# Desired Namespace Variables #}
                        {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                        {% set nsVariables = namespace(storageLocationTest="") %}

                        {# Desired State Storage Location Info #}
                        {% for source in desiredState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                        {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                        {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                        {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                        {# Test  #}
                        {% set nsVariables.storageLocationTest = true %}
                        {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                            {# Current mappings #}
                            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                            
                            {# Desired mappings #}
                            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                            {% if currentDatabaseSchema != desiredDatabaseSchema %}
                                {% set nsVariables.storageLocationTest = false %}
                            {% endif %}
                        {% endfor %}

                        {# Clustering Test #}
                        {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                        {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                        {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                        {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                        {% if 
                            clusterKeyTest == false or
                            clusterKeyExpressionsTest == false or
                            clusterKeyConfigTest == false or
                            clusterKeyConfigExpressionsTest == false %}

                            {% set clusterTest = false %}
                        {% else %}
                            {% set clusterTest = true %}
                        {% endif %}

                        {# Rename / Move Object #}
                        {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                            {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                            ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {% endif %}

                        {# Change table description #}
                        {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                             {{ stage('Change table description', true, "sql", "alter") }}
                             ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            SET COMMENT = '{{ desiredState.node.description | escape }}'
                        {% endif %}

                        {# Drop Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for dropCurCol in currentState.columns %}
                            {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Drop Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    DROP COLUMN 
                                {% else %}
                                    , 
                                {% endif %}
                                "{{ dropCurCol.name }}"
                            {% endif %}
                        {% endfor %}

                        {# Add Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for addDesCol in desiredState.columns %}
                            {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Add Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    ADD COLUMN
                                {% else %}
                                    ,
                                {% endif %}
                                    "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                    {%- if not addDesCol.nullable %} NOT NULL
                                        {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Rename Columns #}
                        {% for renameCurCol in currentState.columns %}
                            {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                                {% if renameCurCol.name != desiredColumnName %}
                                    {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    RENAME COLUMN "{{ renameCurCol.name }}"
                                    TO "{{ desiredColumnName }}"
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Change data types etc #}
                        {% set nsVariables.colchanges = 0 %}
                        {% for alterCurCol in currentState.columns %}        
                            {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set currentDatatype = alterCurCol.dataType %}
                                {% set currentNullable = alterCurCol.nullable %}
                                {% set currentDefaultValue = alterCurCol.defaultValue %}
                                {% set currentDescription = alterCurCol.description %}

                                {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                                {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                                {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                                {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                                {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                                {% set desiredDatatypeAlterBehavior = desiredState.config.dataTypeAlterBehavior %}
                                {% set desiredNullableAlterBehavior = desiredState.config.nullableAlterBehavior %}
                                {% set desiredDataTypeAlterBehavior = desiredState.config.dataTypeAlterBehavior %}

                                {% set datatypeTest = currentDatatype == desiredDatatype %}
                                {% set nullableTest = currentNullable == desiredNullable %}
                                {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                                {% set descriptionTest = currentDescription == desiredDescription %}

                                {% if (datatypeTest == false or 
                                        nullableTest == false  or
                                        defaultValueTest == false or
                                        descriptionTest == false) %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                    {% if nsVariables.colchanges == 1 %}
                                        {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                        MODIFY
                                    {% endif %}
                                    {% if datatypeTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        SET DATA TYPE {{ desiredDatatype }}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if nullableTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if currentNullable == true %}
                                            SET
                                        {% else %}
                                            DROP
                                        {% endif %}
                                        NOT NULL
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if descriptionTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        COMMENT '{{ desiredDescription }}'
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if defaultValueTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if desiredDefaultValue == '' %}
                                            DROP DEFAULT
                                        {% else %}
                                            SET DEFAULT {{ desiredDefaultValue }}
                                        {% endif %}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    
                                {% else %}
                                                        
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Figure out cluster key #}
                        {% set nsVariables = namespace(finalClusterKey="") %}
                        {% if clusterTest == false %}
                            {% if desiredState.config.clusterKeyExpressions == true %}
                                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% if expression[loop.index0] == "" %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                    {% else %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                    {% endif %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                            {% elif desiredState.config.clusterKey == true %}

                                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                            
                            {% else %}

                                {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                            {% endif %}

                            {{ stage('Recluster TABLE', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            {{ nsVariables.finalClusterKey }}

                        {% endif %}


                    {% endif %}


                {% endif %}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {% if currentState.node.materializationType == 'view' %}

                 {{ stage('Drop Table or View', true, "sql", "drop") }}
                 DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

                {% else %}
                 
                   {{ stage('Drop' +' ' + currentState.node.materializationType , true, "sql", "drop") }}
                   DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

                {% endif %}

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}

        run:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           :  Persistent Stage Advanced Deploy == #}
            {# == Node Type Description    : This node loads data into work table using config options distinct,groupby all,order by ,multi-source  == #}

             {# == Check if business key is specified  == #}

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}

            {# == Variable check to identify type of dimension == #}

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}


            {# == To run data quality tests before data insertion == #}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}


            {% if node.materializationType == 'table' or node.materializationType == 'transient table'  %}

            {# == Queries to be excuted before data insertion  == #}

            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}

             {# == Truncate data before data insertion  == #}

                {% if config.truncateBefore %}
                    {{ stage('Truncate Persistent Stage Table') }}
                    TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
                {% endif %}
            	
                {% if has_business_key and is_type_2 %}

                     {# SCD-Type 2 Dimension == #}   

                        {{ stage('MERGE ' + 'SOURCES' | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (

                    {% for source in sources %}

                        /* New Rows That Don't Exist */
                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{  get_clause(source.join,'from')  }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        {{ get_clause(source.join) }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }}
                        )

                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */

                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{  get_clause(source.join,'from')  }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {{  get_clause(source.join)  }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }}
                        )
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        
                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{  get_clause(source.join,'from')  }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {{  get_clause(source.join)  }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }}
                        )
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/

                          (SELECT
                          {% if config.selectDistinct %}
                          DISTINCT
                          {% endif %}
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{  get_clause(source.join,'from')  }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                        {{  get_clause(source.join)  }}
                        {% if config.groupByAll %}
                            GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }} )
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                            {{config.insertStrategy}}
                        {% endif %}   
                    {% endfor %}
                                     
                    ) AS "SRC"
                    ON
                    {% for col in columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% elif has_business_key and not is_type_2 %}

                       {# SCD-Type 1 Dimension == #}

                        {{ stage('MERGE ' + 'SOURCES' | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (

                        {% for source in sources %}
                           ( SELECT
                            {% if config.selectDistinct %}
                            DISTINCT
                            {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                             {% if config.groupByAll %}
                             GROUP BY ALL
                             {% endif %}
                             {{ sortorder_by_colv() }} )     
                             {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                 {{config.insertStrategy}}
                             {% endif %}
                    {% endfor %}
                             )               
                            AS "SRC"               
                        ON
                        {% for col in columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )

                {% else %}

                    {# == Executed if neither business key or change tracking is not specified  == #}


                        {{ stage('Insert ' + 'Sources' | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )


                    {% for source in sources %}


                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }} ) 
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                            {{config.insertStrategy}}
                        {% endif %}
                    {% endfor %}            
                {% endif %}

            {# == Queries to be excuted post data insertion  == #}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

             {# == To run data quality tests after data insertion == #}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage Advanced Deploy
    version: 1
  StepType-183:
    id: "183"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension Advanced Deploy
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        deployStrategy: advanced

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
            - transient table

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - type: multisourceToggle
            enableIf: "{% if node.override.create.enabled %} false {% else %} true {% endif %}"

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION ALL
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: false
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"
            default: true

          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if node.materializationType == 'table' or node.materializationType == 'transient table' %} true {% else %} false {% endif %}"

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: false
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            enableIf: "{% if config.groupByAll or  node.override.create.enabled %} false {% else %} true {% endif %}"
            default: false
            
          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            default: false
            enableIf: "{% if config.selectDistinct or  node.override.create.enabled %} false {% else %} true {% endif %}"    

          - displayName: Order By
            attributeName: orderby
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - type: tabular
            displayName: 'Sort column'
            attributeName: orderbycolumn
            columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
            isRequired: true
            enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"

            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Dimension Advanced Deploy == #}
            {# == Node Type Description    : This node creates dimension table,view and also override create sql for view  with advanced deployment strategy == #}


            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}

            {# Override CreateSQL for view #}

                {% if  desiredState.node.override.create.enabled and desiredState.node.materializationType == 'view' %}
            	
            	    {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'view' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}
                            DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

            	      {{ desiredState.node.override.create.script }}


                {%elif desiredState.node.materializationType == 'view' %}

                    {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'view' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}
                            DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

                     {# CreateSQL for View #}

            		{{ stage('Create Dimension View', true, "sql", "create") }}

            		CREATE OR REPLACE VIEW {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            		(
            			{% for col in desiredState.columns %}
            				"{{ col.name }}"
            				{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            				{%- if not loop.last -%},{% endif %}
            			{% endfor %}
            		)
            		{%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
            		AS
            		{% for source in desiredState.sources %}

            			SELECT {% if desiredState.config.selectDistinct %}DISTINCT{% endif %}

            			{% for col in source.columns %}
            				{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
            					NULL
            				{% else %}
            					{{ get_source_transform(col) }}
            				{% endif %}
            				AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            			{{ source.join }}
                        {% if desiredState.config.groupByAll %}
            		       Group By All
            	        {% endif %}
            			{% if not loop.last %}                 
                           {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% else %}
                                UNION
                           {% endif %} 
                        {% endif %}
            		{% endfor %}

            {% elif desiredState.node.materializationType == 'table' or desiredState.node.materializationType == 'transient table'  %}

                    {# Figure out cluster key #}

                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {% if currentState != undefined and currentState.node.materializationType != desiredState.node.materializationType%}
                    
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}
                             {% if currentState.node.materializationType == 'view' %} 
                                  DROP {{currentState.node.materializationType}} IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            {% else %}
                                  DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            {% endif %}

                        {# CreateSQL for Table #}
                    
                        {{ stage('Create Dimension ' + desiredState.node.materializationType , true, "sql", "create") }}
            			
                           CREATE OR REPLACE {{ desiredState.node.materializationType }} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            			  (
            			  {% for col in desiredState.columns %}
            				"{{ col.name }}" {{ col.dataType }}
            				{% if col.isSurrogateKey %}
            					identity
            				{% endif %}
            				{%- if not col.nullable %} NOT NULL
            					{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            				{% endif %}
            				{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            				{%- if not loop.last -%}, {% endif %}
            			  {% endfor %}
            		    	)
            			  {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                          {% if desiredState.config.clusterKey == true %}
                            {{ stage('Apply Table Clustering', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                            {{ stage('Resume Recluster Table', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                          {% endif %}
                            
                    {% endif %}


                    {% if currentState == undefined %}

                    {# CreateSQL for Table #}
                    
                        {{ stage('Create Dimension ' + desiredState.node.materializationType , true, "sql", "create") }}
            			CREATE OR REPLACE {{ desiredState.node.materializationType }} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            			(
            			{% for col in desiredState.columns %}
            				"{{ col.name }}" {{ col.dataType }}
            				{% if col.isSurrogateKey %}
            					identity
            				{% endif %}
            				{%- if not col.nullable %} NOT NULL
            					{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            				{% endif %}
            				{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            			)
            			{%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                        {% if desiredState.config.clusterKey == true %}
                            {{ stage('Apply Table Clustering', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                            {{ stage('Resume Recluster Table', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                        {% endif %}

                    {% elif currentState != undefined and currentState.node.materializationType == desiredState.node.materializationType %}

                        {# Change Node Name or Change Storage Location #}
                        {# Storage Location Tests #}
                        {# Only need to account for updated Storage Location mappings   #}
                        {# Current Namespace Varialbes #}
                        {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                        {# Current State Storage Location Info #}
                        {% for source in currentState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                        {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                        {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                        {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                        {# Desired Namespace Variables #}
                        {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                        {% set nsVariables = namespace(storageLocationTest="") %}

                        {# Desired State Storage Location Info #}
                        {% for source in desiredState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                        {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                        {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                        {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                        {# Test  #}
                        {% set nsVariables.storageLocationTest = true %}
                        {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}
                         

                        {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                            {# Current mappings #}
                            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                            
                            {# Desired mappings #}
                            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                            {% if currentDatabaseSchema != desiredDatabaseSchema %}
                                {% set nsVariables.storageLocationTest = false %}
                            {% endif %}
                        {% endfor %}

                        {# Clustering Test #}
                        {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                        {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                        {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                        {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                        {% if 
                            clusterKeyTest == false or
                            clusterKeyExpressionsTest == false or
                            clusterKeyConfigTest == false or
                            clusterKeyConfigExpressionsTest == false %}

                            {% set clusterTest = false %}
                        {% else %}
                            {% set clusterTest = true %}
                        {% endif %}

                        {# Rename / Move Object #}
                        {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                            {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                            ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {% endif %}

                        {# Change table description #}
                        {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                             {{ stage('Change table description', true, "sql", "alter") }}
                             ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            SET COMMENT = '{{ desiredState.node.description | escape }}'
                        {% endif %}

                        {# Drop Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for dropCurCol in currentState.columns %}
                            {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Drop Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    DROP COLUMN 
                                {% else %}
                                    , 
                                {% endif %}
                                "{{ dropCurCol.name }}"
                            {% endif %}
                        {% endfor %}

                        {# Add Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for addDesCol in desiredState.columns %}
                            {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Add Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    ADD COLUMN
                                {% else %}
                                    ,
                                {% endif %}
                                    "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                    {%- if not addDesCol.nullable %} NOT NULL
                                        {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Rename Columns #}
                        {% for renameCurCol in currentState.columns %}
                            {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                                {% if renameCurCol.name != desiredColumnName %}
                                    {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    RENAME COLUMN "{{ renameCurCol.name }}"
                                    TO "{{ desiredColumnName }}"
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Change data types etc #}
                        {% set nsVariables.colchanges = 0 %}
                        {% for alterCurCol in currentState.columns %}        
                            {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set currentDatatype = alterCurCol.dataType %}
                                {% set currentNullable = alterCurCol.nullable %}
                                {% set currentDefaultValue = alterCurCol.defaultValue %}
                                {% set currentDescription = alterCurCol.description %}

                                {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                                {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                                {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                                {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                                {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                                {% set datatypeTest = currentDatatype == desiredDatatype %}
                                {% set nullableTest = currentNullable == desiredNullable %}
                                {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                                {% set descriptionTest = currentDescription == desiredDescription %}

                                {% if (datatypeTest == false or 
                                        nullableTest == false  or
                                        defaultValueTest == false or
                                        descriptionTest == false) %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                    {% if nsVariables.colchanges == 1 %}
                                        {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                        MODIFY
                                    {% endif %}
                                    {% if datatypeTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        SET DATA TYPE {{ desiredDatatype }}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if nullableTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if currentNullable == true %}
                                            SET
                                        {% else %}
                                            DROP
                                        {% endif %}
                                        NOT NULL
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if descriptionTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        COMMENT '{{ desiredDescription }}'
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if defaultValueTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if desiredDefaultValue == '' %}
                                            DROP DEFAULT
                                        {% else %}
                                            SET DEFAULT {{ desiredDefaultValue }}
                                        {% endif %}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    
                                {% else %}
                                                        
                                {% endif %}
                            {% endif %}
                        {% endfor %}
                        
                        {# Figure out cluster key #}
                        {% set nsVariables = namespace(finalClusterKey="") %}
                        {% if clusterTest == false %}
                            {% if desiredState.config.clusterKeyExpressions == true %}
                                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% if expression[loop.index0] == "" %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                    {% else %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                    {% endif %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                            {% elif desiredState.config.clusterKey == true %}

                                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                            
                            {% else %}

                                {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                            {% endif %}

                            {{ stage('Recluster TABLE', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            {{ nsVariables.finalClusterKey }}

                        {% endif %}

                    {% endif %}


                {% endif %}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {% if currentState.node.materializationType == 'view' %}

                 {{ stage('Drop Table or View', true, "sql", "drop") }}
                 DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

                {% else %}
                 
                   {{ stage('Drop ' + currentState.node.materializationType , true, "sql", "drop") }}
                   DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

                {% endif %}

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Dimension Advanced Deploy == #}
            {# == Node Type Description    :This node loads data into work table using config options distinct,groupby all,order by ,multi-source  == #}


            {# == Variable check to identify type of dimension == #}

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

            {# == To run data quality tests before data insertion == #}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}


            {% if node.materializationType == 'table' or node.materializationType == 'transient table' %}

            {# == Queries to be excuted before data insertion  == #}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}

             {# == Truncate data before data insertion  == #}

                {% if config.truncateBefore %}
                    {{ stage('Truncate Dimension Table') }}
                    TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
                {% endif %}
            	
                {% if is_type_2 %}
                     
                     {# SCD-Type 2 Dimension == #}
                    
                        {{ stage('MERGE ' + ' Sources' | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                  

                    {% for source in sources %}

                       {% set joinclause = source.join %}
                       
                        /* New Rows That Don't Exist */
                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{  get_clause(joinclause,'from')  }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        {{ get_clause(joinclause) }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }}
                        )

                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */

                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{  get_clause(joinclause,'from')  }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {{  get_clause(joinclause)  }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }}
                        )
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        
                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{  get_clause(joinclause,'from')  }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {{  get_clause(joinclause)  }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }}
                        )
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/

                          (SELECT
                          {% if config.selectDistinct %}
                          DISTINCT
                          {% endif %}
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{  get_clause(joinclause,'from')  }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                        {{  get_clause(joinclause)  }}
                        {% if config.groupByAll %}
                            GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }}) 
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                            {{config.insertStrategy}}
                        {% endif %}               
                    {% endfor %}  
                                     
                    ) AS "SRC"
                    ON
                    {% for col in columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

            				



                {% else %}
                    
                    {# SCD-Type 1 Dimension == #}

                        {{ stage('MERGE ' + ' Sources' | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (

                    {% for source in sources %}
                           ( SELECT
                            {% if config.selectDistinct %}
                            DISTINCT
                            {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                             {% if config.groupByAll %}
                             GROUP BY ALL
                             {% endif %}
                             {{ sortorder_by_colv() }} )     
                             {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                 {{config.insertStrategy}}
                             {% endif %}
                    {% endfor %}
                             )               
                            AS "SRC"               
                        ON
                        {% for col in columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
            					
                {% endif %}

            {# == Queries to be excuted post data insertion  == #}

            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {# == To run data quality tests after data insertion == #}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension Advanced Deploy
    version: 1
  StepType-264:
    id: "264"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Factless Fact Advanced Deploy
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        deployStrategy: advanced

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - transient table

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - type: multisourceToggle
            enableIf: "{% if node.override.create.enabled %} false {% else %} true {% endif %}"

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION ALL
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: false
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if node.materializationType == 'table' or node.materializationType == 'transient table'  %} true {% else %} false {% endif %}"

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: false
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"



          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"
            
          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            default: false
            enableIf: "{% if config.groupByAll or  node.override.create.enabled %} %} false {% else %} true {% endif %}"

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            default: false
            enableIf: "{% if config.selectDistinct or  node.override.create.enabled %} %} false {% else %} true {% endif %}"   

          - displayName: Order By
            attributeName: orderby
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - type: tabular
            displayName: 'Sort column'
            attributeName: orderbycolumn
            columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
            isRequired: true
            enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Factless Fact Advanced Deploy == #}
            {# == Node Type Description    : This node creates fact table,view and also override create sql for view with Advanced Deploy Strategy == #}


            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}

            {%if desiredState.node.materializationType == 'table' or desiredState.node.materializationType == 'transient table' %}
                
             {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {% if currentState != undefined and currentState.node.materializationType != desiredState.node.materializationType %}

                            {# Change in materialization type #}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}
                            DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}

                            {{ stage('Create Fact '+ desiredState.node.materializationType, true, "sql", "create") }}
            			CREATE OR REPLACE {{ desiredState.node.materializationType }} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        (
                            {% for col in desiredState.columns %}
                                "{{ col.name }}" {{ col.dataType }}
                                {%- if not col.nullable %} NOT NULL
                                    {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                        )
            			{%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                        {% if desiredState.config.clusterKey == true %}
                            {{ stage('Apply Table Clustering', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                            {{ stage('Resume Recluster Table', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                        {% endif %}
                    {% endif %}   

                    {% if currentState == undefined %}
                        {{ stage('Create Fact '+ desiredState.node.materializationType, true, "sql", "create") }}
            			CREATE OR REPLACE {{ desiredState.node.materializationType }} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        (
                            {% for col in desiredState.columns %}
                                "{{ col.name }}" {{ col.dataType }}
                                {%- if not col.nullable %} NOT NULL
                                    {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                        )
            			{%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                        {% if desiredState.config.clusterKey == true %}
                            {{ stage('Apply Table Clustering', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                            {{ stage('Resume Recluster Table', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                        {% endif %}

                    {% elif currentState != undefined and currentState.node.materializationType == desiredState.node.materializationType %}

                        {# Change Node Name or Change Storage Location #}
                        {# Storage Location Tests #}
                        {# Only need to account for updated Storage Location mappings   #}
                        {# Current Namespace Varialbes #}
                        {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                        {# Current State Storage Location Info #}
                        {% for source in currentState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                        {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                        {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                        {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                        {# Desired Namespace Variables #}
                        {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                        {% set nsVariables = namespace(storageLocationTest="") %}

                        {# Desired State Storage Location Info #}
                        {% for source in desiredState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                        {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                        {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                        {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                        {# Test  #}
                        {% set nsVariables.storageLocationTest = true %}
                        {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                            {# Current mappings #}
                            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                            
                            {# Desired mappings #}
                            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                            {% if currentDatabaseSchema != desiredDatabaseSchema %}
                                {% set nsVariables.storageLocationTest = false %}
                            {% endif %}
                        {% endfor %}

                        {# Clustering Test #}
                        {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                        {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                        {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                        {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                        {% if 
                            clusterKeyTest == false or
                            clusterKeyExpressionsTest == false or
                            clusterKeyConfigTest == false or
                            clusterKeyConfigExpressionsTest == false %}

                            {% set clusterTest = false %}
                        {% else %}
                            {% set clusterTest = true %}
                        {% endif %}

                        {# Rename / Move Object #}
                        {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                            {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                            ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {% endif %}

                        {# Change table description #}
                        {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                             {{ stage('Change table description', true, "sql", "alter") }}
                             ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            SET COMMENT = '{{ desiredState.node.description | escape }}'
                        {% endif %}

                        {# Drop Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for dropCurCol in currentState.columns %}
                            {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Drop Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    DROP COLUMN 
                                {% else %}
                                    , 
                                {% endif %}
                                "{{ dropCurCol.name }}"
                            {% endif %}
                        {% endfor %}

                        {# Add Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for addDesCol in desiredState.columns %}
                            {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Add Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    ADD COLUMN
                                {% else %}
                                    ,
                                {% endif %}
                                    "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                    {%- if not addDesCol.nullable %} NOT NULL
                                        {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Rename Columns #}
                        {% for renameCurCol in currentState.columns %}
                            {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                                {% if renameCurCol.name != desiredColumnName %}
                                    {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    RENAME COLUMN "{{ renameCurCol.name }}"
                                    TO "{{ desiredColumnName }}"
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Change data types etc #}
                        {% set nsVariables.colchanges = 0 %}
                        {% for alterCurCol in currentState.columns %}        
                            {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set currentDatatype = alterCurCol.dataType %}
                                {% set currentNullable = alterCurCol.nullable %}
                                {% set currentDefaultValue = alterCurCol.defaultValue %}
                                {% set currentDescription = alterCurCol.description %}

                                {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                                {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                                {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                                {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                                {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                                {% set datatypeTest = currentDatatype == desiredDatatype %}
                                {% set nullableTest = currentNullable == desiredNullable %}
                                {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                                {% set descriptionTest = currentDescription == desiredDescription %}

                                {% if (datatypeTest == false or 
                                        nullableTest == false  or
                                        defaultValueTest == false or
                                        descriptionTest == false) %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                    {% if nsVariables.colchanges == 1 %}
                                        {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                        MODIFY
                                    {% endif %}
                                    {% if datatypeTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        SET DATA TYPE {{ desiredDatatype }}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if nullableTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if currentNullable == true %}
                                            SET
                                        {% else %}
                                            DROP
                                        {% endif %}
                                        NOT NULL
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if descriptionTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        COMMENT '{{ desiredDescription }}'
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if defaultValueTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if desiredDefaultValue == '' %}
                                            DROP DEFAULT
                                        {% else %}
                                            SET DEFAULT {{ desiredDefaultValue }}
                                        {% endif %}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    
                                {% else %}
                                                        
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Figure out cluster key #}
                        {% set nsVariables = namespace(finalClusterKey="") %}
                        {% if clusterTest == false %}
                            {% if desiredState.config.clusterKeyExpressions == true %}
                                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% if expression[loop.index0] == "" %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                    {% else %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                    {% endif %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                            {% elif desiredState.config.clusterKey == true %}

                                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                            
                            {% else %}

                                {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                            {% endif %}

                            {{ stage('Recluster TABLE', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            {{ nsVariables.finalClusterKey }}

                        {% endif %}

                    {% endif %}


                {% endif %}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {% if currentState.node.materializationType == 'view' %}

                 {{ stage('Drop Table or View', true, "sql", "drop") }}
                 DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

                {% else %}
                 
                   {{ stage('Drop ' + currentState.node.materializationType , true, "sql", "drop") }}
                   DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

                {% endif %}

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Factless fact  == #}
            {# == Node Type Description    : This node loads data into fact table using config options distinct,groupby all,order by ,multi-source  == #}

            {# == To run data quality tests before data insertion == #}

            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' or node.materializationType == 'transient table' %}

                {# == Queries to be excuted before data insertion  == #}

                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                
                {# == Truncate data before data insertion  == #}

                    {% if config.truncateBefore %}
                        {{ stage('Truncate Fact Table') }}
                        TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
                    {% endif %}
                    
                {# == Merge into the target fact table == #}
                


                  {{ stage('MERGE ' + 'Sources' | string ) }}
                  MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                  USING (
                            {% for source in sources %}
                                (SELECT
                                {% if config.selectDistinct %}
                                DISTINCT
                                {% endif %}
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                                {% if config.groupByAll %}
                                    GROUP BY ALL
                                {% endif %}
                                {{ sortorder_by_colv() }})
                                {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                    {{config.insertStrategy}}
                                {% endif %}
                            {% endfor %}   
                                )
                                AS "SRC"
                  ON
                            {% for col in columns if not ( col.isSystemUpdateDate or
                                                                 col.isSystemCreateDate) -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
            				
            				WHEN MATCHED
                                {% for col in columns if not (col.isSystemCreateDate) %}
                                    {% if loop.first %}
                                        AND (
                                    {% else %}
                                        OR
                                    {% endif %}
                                    NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                    {% if loop.last %}
                                        )
                                    {% endif %}
                                {% endfor %}
                                THEN UPDATE SET
                                {%- for col in columns if not (col.isSystemCreateDate) %}
                                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                    {% if not loop.last %}, {% endif %}
                                {% endfor %}
                  
                  WHEN NOT MATCHED THEN
                    INSERT (
                    {%- for col in columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )


             {# == Queries to be excuted post data insertion  == #}

                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

            {# == To run data quality tests after data insertion == #}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
    name: Factless Fact  Advanced Deploy
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs: {}
version: 2
