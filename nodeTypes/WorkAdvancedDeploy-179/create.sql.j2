{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Work Advanced Deploy == #}
{# == Node Type Description    : This node creates work table,view and also override create sql for view with advanced deployment strategy == #}www
{#Release date:20240516 Version:1.0.0#}
{#Release date:20240731  Version:1.1.1 Released By:AS  Description: Fix for missing current state storage location #}
{#Release date:20240812  Version:1.1.3 Released By:AS  Description: Cluster key formatting modified  #}
{#Release date:20241014  Version:1.1.4 Released By:AS  Description: Typo error and single namespace variable initialization #}
{#Release date:20241114  Version:1.1.5 Released By:AS  Description: Node Description / Comments #}

{% if desiredState %}

    {% if  desiredState.node.override.create.enabled and desiredState.node.materializationType == 'view' %}

         {% if currentState != undefined %}
            {% if currentState.node.materializationType != 'view' %}
                {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name)) }}
                DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
            {% endif %}
        {% endif %}

	      {{ desiredState.node.override.create.script }}

    {%elif desiredState.node.materializationType == 'view' %}

        {% if currentState != undefined %}
            {%if currentState.storageLocations|length == 0%}          
              {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | string %}
              {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | string %}
               {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
               
            {%else %}  
            {# Current target node mappings #}
            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | first %}
            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | first %}
            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}  
            {% endif %}      
       
            {# Desired target node mappings #}
            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='database') | first %}
            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='schema') | first %}
            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}  		
            {% if currentState.node.materializationType != 'view' %}
                {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name),true, "sql", "drop") }}
                DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
            {% elif  desiredState.node.name != currentState.node.name or desiredDatabaseSchema != currentDatabaseSchema  %}
                {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name),true, "sql", "drop") }}
                DROP VIEW IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}                    
            {% endif %}
        {% endif %}
       
	   {% if currentState == undefined or currentState != desiredState %}
        {{ stage('Create Work View',true, "sql", "create") }}

        CREATE OR REPLACE VIEW {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
        (
            {% for col in desiredState.columns %}
                "{{ col.name }}"
                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
        )
        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
        AS
        {% for source in desiredState.sources %}
            SELECT
            {% if desiredState.config.selectDistinct %}
              DISTINCT
            {% endif %}
            {% for col in source.columns %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}

            {{ source.join }}
            {% if desiredState.config.groupByAll %}
		       Group By All
	         {% endif %}
            {% if not loop.last %}
                {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                    {{ desiredState.config.insertStrategy }}
                {% else %}
                    UNION
                {% endif %}
            {% endif %}
        {% endfor %}
      {% endif %}
      
    {% elif desiredState.node.materializationType == 'table' or desiredState.node.materializationType == 'transient table'  %}
        
        {# Figure out cluster key #}
        {% set nsVariables = namespace(finalClusterKey="") %}
        {% if desiredState.config.clusterKey == true %}
            {% if desiredState.config.clusterKeyExpressions == true %}
                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% if expression[loop.index0] == "" %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                    {% else %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                    {% endif %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% else %}

                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% endif %}
        {% endif %}


        {% if currentState != undefined and currentState.node.materializationType != desiredState.node.materializationType %}

                {# Change in materialization type #}

                {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name)) }}

                 {% if currentState.node.materializationType == 'view' %} 
                      DROP {{currentState.node.materializationType}} IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                {% else %}
                      DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                {% endif %}
                 
                {{ stage('Create Work '+ ' {{desiredState.node.materializationType}}' ) }}
               CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                (
                {% for col in desiredState.columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                )
               {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

               {% if desiredState.config.clusterKey == true %}
                  {{ stage('Apply Table Clustering') }}
                 ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                   {{ stage('Resume Recluster Table') }}
                  ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER

               {% endif %}
                
        {% endif %}

        {% if currentState == undefined or currentState.storageLocations | length == 0  %}
            {{ stage('Create Work '+ ' {{desiredState.node.materializationType}}' ) }}
            CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            (
                {% for col in desiredState.columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

        {% if desiredState.config.clusterKey == true %}
            {{ stage('Apply Table Clustering') }}
            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

            {{ stage('Resume Recluster Table') }}
            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
        {% endif %}

        {% elif currentState != undefined and currentState.node.materializationType == desiredState.node.materializationType %}

            {# Change Node Name or Change Storage Location #}
            {# Storage Location Tests #}


         {% set nsVariables = namespace(storageLocationTest=true) %}

            {# =========================================================
            Initialize metadata tracking variables
            ========================================================= #}
            {% set nsMetaVariables = namespace(
                joinTest            = true,
                transformTest       = true,
                sourceLinkTest      = true,
                truncateBeforeTest  = true,
                testsEnabledTest    = true,
                distinctTest        = true,
                groupByAllTest      = true,
                preSQLTest          = true,
                postSQLTest         = true,
                orderByTest         = true,
                ASOFTest            = true,
                metaDataChanged     = false,
                joinDiff            = [],
                transformDiff       = [],
                sourceLinkDiff      = [],
                truncateBeforeDiff  = [],
                testsEnabledDiff    = [],
                distinctDiff        = [],
                groupByAllDiff      = [],
                preSQLDiff          = [],
                postSQLDiff         = [],
                orderByDiff         = [],
                metaDataChanges     = [],
                ASOFDiff            = [],
                metadataUpdate      = 'Metadata Update'
            ) %}

            {# =========================================================
            Compare source counts
            ========================================================= #}
            {% set sourcesTest = currentState.sources | count == desiredState.sources | count %}

            {% if sourcesTest %}
                {% for src in desiredState.sources %}
                    {% set matchingSource = currentState.sources | selectattr('name', 'equalto', src.name) | first %}
                    {% if matchingSource %}

                        {# =========================================================
                        Join comparison
                        ========================================================= #}
                        {% set desiredStateSources = src.join | replace("{{", '"{{"') | replace("}}", '"}}"') | replace('/*', '/ *') | replace('*/', '* /') %}
                        {% set currentStateSources = matchingSource.join | replace("{{", '"{{"') | replace("}}", '"}}"') | replace('/*', '/ *') | replace('*/', '* /') %}

                        {# Same number of sources — compare join transformations #}
                        {% if desiredStateSources != currentStateSources %}
                            {% set nsMetaVariables.joinTest = false %}
                            {% set _ = nsMetaVariables.joinDiff.append({
                                "Source": src.name,
                                "is": desiredStateSources,
                                "was": currentStateSources }) %}
                        {% endif %}

                        {# =========================================================
                        Transformation and column source changes comparison (per column)
                        ========================================================= #}
                        {% for col in src.columns %}

                        {# Try to get matching column #}
                            {% set matched_column = matchingSource.columns
                                | selectattr('id', 'equalto', col.id)
                                | first
                            %}

                            {% if matched_column %}

                                {# Transformation Changes #}
                                {% set currentTransform = matchingSource.columns
                                    | selectattr('id', 'equalto', col.id)
                                    | map(attribute='transform')
                                    | first
                                    | default('')
                                %}

                                {% if currentTransform != col.transform %}
                                    {% set nsMetaVariables.transformTest = false %}
                                    {% set _ = nsMetaVariables.transformDiff.append({
                                        "Source Name": src.name,
                                        "Column Name": col.name,
                                        "is": col.transform,
                                        "was": currentTransform
                                    }) %}
                                {% endif %}

                                {# Column Source Changes #}
                                {% set currentSource = matchingSource.columns
                                    | selectattr('id', 'equalto', col.id)
                                    | map(attribute='sourceColumns')
                                    | first
                                    | default('')
                                %}

                                {% if currentSource != col.sourceColumns %}
                                    {% set nsMetaVariables.sourceLinkTest = false %}
                                    {% set _ = nsMetaVariables.sourceLinkDiff.append({
                                        "Source Name": src.name,
                                        "Column Name": col.name,
                                        "is": (col.sourceColumns | selectattr('node','defined') | map(attribute='node.name') | first) | default('') ~ "-" ~ (col.sourceColumns | selectattr('column','defined') | map(attribute='column.name') | first) | default(''),
                                        "was": (currentSource | selectattr('node','defined') | map(attribute='node.name') | first) | default('') ~ "-" ~ (currentSource | selectattr('column','defined') | map(attribute='column.name') | first) | default('')
                                    }) %}
                                {% endif %}
                            {% endif %}
                        {% endfor %}
                    {% endif %}
                {% endfor %}

                {% if nsMetaVariables.transformTest == false %}
                    {{ update_metadata("Transform", nsMetaVariables.transformDiff, "Transform") }}
                {% endif %}

                {% if nsMetaVariables.sourceLinkTest == false %}
                    {{ update_metadata("Source Link", nsMetaVariables.sourceLinkDiff, "Source Link") }}
                {% endif %}
            {% else %}
                {# Source count mismatch — compare source names instead #}
                {% set desiredStateSources = desiredState.sources | map(attribute='name') | list | sort %}
                {% set currentStateSources = currentState.sources | map(attribute='name') | list | sort %}

                {% if desiredStateSources != currentStateSources %}
                    {% set nsMetaVariables.joinTest = false %}
                    {% set _ = nsMetaVariables.joinDiff.append({"is": desiredStateSources, "was": currentStateSources }) %}
                {% endif %}
            {% endif %}

            {% if nsMetaVariables.joinTest == false %}
                    {{ update_metadata("Join", nsMetaVariables.joinDiff, "Join") }}
            {% endif %}

            {# =========================================================
            ASOF Toggle comparison
            ========================================================= #}
            {% if currentState.config.asofJoinMain != desiredState.config.asofJoinMain %}
                {% set nsMetaVariables.ASOFTest = false %}
                {% set _ = nsMetaVariables.ASOFDiff.append({
                    "is": desiredState.config.asofJoinMain,
                    "was": currentState.config.asofJoinMain
                }) %}

                {{ update_metadata("ASOF", nsMetaVariables.ASOFDiff, "ASOF") }}

            {% endif %}

            {# =========================================================
            Truncate Table comparison
            ========================================================= #}
            {% if currentState.config.truncateBefore != desiredState.config.truncateBefore %}
                {% set nsMetaVariables.truncateBeforeTest = false %}
                {% set _ = nsMetaVariables.truncateBeforeDiff.append({
                    "is": desiredState.config.truncateBefore,
                    "was": currentState.config.truncateBefore
                }) %}

                {{ update_metadata("Truncate Before", nsMetaVariables.truncateBeforeDiff, "Truncate Before") }}

            {% endif %}

            {# =========================================================
            Test Enabled comparison (per column)
            ========================================================= #}
            {% if desiredState.config.testsEnabled != currentState.config.testsEnabled %}

                    {% set nsMetaVariables.testsEnabledTest = false %}
                    {% set _ = nsMetaVariables.testsEnabledDiff.append({
                        "is": desiredState.config.testsEnabled,
                        "was": currentState.config.testsEnabled
                    }) %}

            {% elif desiredState.config.testsEnabled and currentState.config.testsEnabled %}

                {# Changes in Node Tests #}
                {% if currentState.node.tests | length != desiredState.node.tests | length %}

                    {% set nsMetaVariables.testsEnabledTest = false %}
                    {% set _ = nsMetaVariables.testsEnabledDiff.append({
                        "is": desiredState.node.tests | map(attribute="name") | list | sort,
                        "was": currentState.node.tests | map(attribute="name") | list | sort 
                    }) %}
                {% else %}
                    {% for dtest in desiredState.node.tests %}
                        {% set ctest = (currentState.node.tests | selectattr("name", "equalto", dtest.name) | first) %}

                        {% if ctest != dtest %}
                            {% set nsMetaVariables.testsEnabledTest = false %}
                            {% set _ = nsMetaVariables.testsEnabledDiff.append({
                                "is": dtest | replace('/*', '/ *') | replace('*/', '* /'),
                                "was": ctest | replace('/*', '/ *') | replace('*/', '* /')
                            }) %}
                        {% endif %}
                    {% endfor %}
                {% endif %}

                {# Changes in Column tests #}
                {% for src in desiredState.sources %}

                    {% set matchingSource = currentState.sources | selectattr('name', 'equalto', src.name) | first %}

                    {% if matchingSource %}
                        {% for col in src.columns %}
                            {% set currentTest = matchingSource.columns
                                | selectattr('id', 'equalto', col.id)
                                | map(attribute='tests')
                                | first
                                | default('')
                            %}

                            {% if currentTest != col.tests %}
                                {% set nsMetaVariables.testsEnabledTest = false %}
                                {% set cTests = currentTest | map(attribute="name") | list | sort %}
                                {% set dTests = col.tests | map(attribute="name") | list | sort %}
                                {% set _ = nsMetaVariables.testsEnabledDiff.append({
                                    "Column Name": col.name,
                                    "is": dTests,
                                    "was": cTests
                                }) %}
                            {% endif %}
                        {% endfor %}
                    {% endif %}
                {% endfor %}
            {% endif %}

            {% if nsMetaVariables.testsEnabledTest == false %}
                {{ update_metadata("Test Enanbled", nsMetaVariables.testsEnabledDiff, "Test Enanbled") }}
            {% endif %}

            {# =========================================================
            Distinct Toggle comparison
            ========================================================= #}
            {% if currentState.config.selectDistinct != desiredState.config.selectDistinct %}
                {% set nsMetaVariables.distinctTest = false %}
                {% set _ = nsMetaVariables.distinctDiff.append({
                    "is": desiredState.config.selectDistinct,
                    "was": currentState.config.selectDistinct
                }) %}

                {{ update_metadata("Distinct", nsMetaVariables.distinctDiff, "Distinct") }}

            {% endif %}

            {# =========================================================
            GroupByAll Toggle comparison
            ========================================================= #}
            {% if currentState.config.groupByAll != desiredState.config.groupByAll %}
                {% set nsMetaVariables.groupByAllTest = false %}
                {% set _ = nsMetaVariables.groupByAllDiff.append({
                    "is": desiredState.config.groupByAll,
                    "was": currentState.config.groupByAll
                }) %}
                
                {{ update_metadata("GroupByAll", nsMetaVariables.groupByAllDiff, "GroupByAll") }}

            {% endif %}

            {# =========================================================
            PRE-SQL comparison
            ========================================================= #}
            {% if currentState.config.preSQL != desiredState.config.preSQL %}
                {% set nsMetaVariables.preSQLTest = false %}
                {% set _ = nsMetaVariables.preSQLDiff.append({
                    "is": desiredState.config.preSQL | replace('/*', '/ *') | replace('*/', '* /'),
                    "was": currentState.config.preSQL | replace('/*', '/ *') | replace('*/', '* /')
                }) %}
                
                {{ update_metadata("pre SQL", nsMetaVariables.preSQLDiff, "pre SQL") }}

            {% endif %}

            {# =========================================================
            POST-SQL comparison
            ========================================================= #}
            {% if currentState.config.postSQL != desiredState.config.postSQL %}
                {% set nsMetaVariables.postSQLTest = false %}
                {% set _ = nsMetaVariables.postSQLDiff.append({
                    "is": desiredState.config.postSQL | replace('/*', '/ *') | replace('*/', '* /'),
                    "was": currentState.config.postSQL | replace('/*', '/ *') | replace('*/', '* /')
                }) %}
                
                {{ update_metadata("post SQL", nsMetaVariables.postSQLDiff, "post SQL") }}

            {% endif %}

            {# =========================================================
            Order By comparison (per column)
            ========================================================= #}
            {% if currentState.config.orderby != desiredState.config.orderby %}

                {% set nsMetaVariables.orderByTest = false %}
                {% set _ = nsMetaVariables.orderByDiff.append({
                     "is": desiredState.config.orderby,
                    "was": currentState.config.orderby
                }) %}
    
            {% elif currentState.config.orderby and desiredState.config.orderby %}

                {% set desiredSortColList = [] %}
                {% set currentSortColList = [] %}

                {# Desired Column sort order #}
                {% for item in desiredState.config.orderbycolumn.get('items', []) %}
                    {% set _ = desiredSortColList.append({
                                "Column Name": item.sortColName.name,
                                "Sort Order": item.sortOrder
                    }) %}
                {% endfor%}
                {# Current Column sort order #}
                {% for item in currentState.config.orderbycolumn.get('items', []) %}
                    {% set _ = currentSortColList.append({
                                "Column Name": item.sortColName.name,
                                "Sort Order": item.sortOrder
                    }) %}
                {% endfor%}

                {% if desiredSortColList != currentSortColList %}
                    {% set nsMetaVariables.orderByTest = false %}
                    {% set _ = nsMetaVariables.orderByDiff.append({
                        "is": desiredSortColList,
                        "was": currentSortColList
                    }) %}
                {% endif %}
             {% endif %}

            {% if nsMetaVariables.orderByTest == false %}
                {{ update_metadata("Order By", nsMetaVariables.orderByDiff, "Order By") }}
            {% endif %}

            {# =========================================================
            Handle detected metadata changes and update
            ========================================================= #}
            {% if nsMetaVariables.joinTest == false
            or sourcesTest == false
            or nsMetaVariables.transformTest == false
            or nsMetaVariables.sourceLinkTest == false
            or nsMetaVariables.truncateBeforeTest == false
            or nsMetaVariables.testsEnabledTest == false
            or nsMetaVariables.distinctTest == false
            or nsMetaVariables.groupByAllTest == false
            or nsMetaVariables.postSQLTest == false
            or nsMetaVariables.preSQLTest == false
            or nsMetaVariables.orderByTest == false
            or nsMetaVariables.ASOFTest == false
            %}
                {% set nsMetaVariables.metaDataChanged = true %}

                {{ stage(nsMetaVariables.metadataUpdate) }}
                -- Metadata changes detected
                /* {{ nsMetaVariables.metaDataChanges }} */
                select 1=0
            {% endif %}

            {# Test  #}
            {%if currentState.storageLocations|length == 0%}          
              {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | string %}
              {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | string %}
               {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
               
            {%else %}   
            {# Current target node mappings #}
            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | first %}
            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | first %}
            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}  
			{% endif %}		 
        
            {# Desired target node mappings #}
            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='database') | first %}
            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='schema') | first %}
            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}           
            
             {% if currentDatabaseSchema != desiredDatabaseSchema %}
                {% set nsVariables.storageLocationTest = false %}
             {% endif %}

            {# Clustering Test #}
            {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
            {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
            {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
            {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

            {% if 
                clusterKeyTest == false or
                clusterKeyExpressionsTest == false or
                clusterKeyConfigTest == false or
                clusterKeyConfigExpressionsTest == false %}

                {% set clusterTest = false %}
            {% else %}
                {% set clusterTest = true %}
            {% endif %}

            {# Rename / Move Object #}
            {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                {{ stage('Rename and / or Move Table') }}
                {% set srcSchName = currentState.node.location.name %}
                {% set cdb = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
                {% set csch = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}

                ALTER TABLE  "{{cdb}}"."{{csch}}"."{{currentState.node.name}}"
                RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}

                {# Metadata changes detected #}
                {% set nsMetaVariables.metaDataChanged = true %} 
            {% endif %}

            {# Change table description #}
            {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                 {{ stage('Change table description') }}
                 ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                SET COMMENT = '{{ desiredState.node.description | escape }}'

                {# Metadata changes detected #}
                {% set nsMetaVariables.metaDataChanged = true %} 
            {% endif %}



            {# Drop Columns #}
            {% set nsVariables = namespace(colchanges=0) %}
            {% for dropCurCol in currentState.columns %}
                {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                    {% if nsVariables.colchanges == 1 %}
                        {{ stage('Drop Columns') }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        DROP COLUMN 
                    {% else %}
                        , 
                    {% endif %}
                    "{{ dropCurCol.name }}"

                    {# Metadata changes detected #}
                    {% set nsMetaVariables.metaDataChanged = true %} 
                {% endif %}
            {% endfor %}

            {# Add Columns #}
            {% set nsVariables = namespace(colchanges=0) %}
            {% for addDesCol in desiredState.columns %}
                {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                    {% if nsVariables.colchanges == 1 %}
                        {{ stage('Add Columns') }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        ADD COLUMN
                    {% else %}
                        ,
                    {% endif %}
                        "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                        {%- if not addDesCol.nullable %} NOT NULL
                            {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDesCol.description | escape }}'{% endif %}

                        {# Metadata changes detected #}
                        {% set nsMetaVariables.metaDataChanged = true %} 
                {% endif %}
            {% endfor %}

            {# Rename Columns #}
            {% for renameCurCol in currentState.columns %}
                {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                    {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                    {% if renameCurCol.name != desiredColumnName %}
                        {{ stage('Rename Column ' + renameCurCol.name) }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        RENAME COLUMN "{{ renameCurCol.name }}"
                        TO "{{ desiredColumnName }}"

                        {# Metadata changes detected #}
                        {% set nsMetaVariables.metaDataChanged = true %} 
                    {% endif %}
                {% endif %}
            {% endfor %}

            {# Change data types etc #}
            {% set nsVariables.colchanges = 0 %}
            {% for alterCurCol in currentState.columns %}        
                {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                    {% set currentDatatype = alterCurCol.dataType %}
                    {% set currentNullable = alterCurCol.nullable %}
                    {% set currentDefaultValue = alterCurCol.defaultValue %}
                    {% set currentDescription = alterCurCol.description %}

                    {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                    {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                    {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                    {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                    {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                    {% set datatypeTest = currentDatatype == desiredDatatype %}
                    {% set nullableTest = currentNullable == desiredNullable %}
                    {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                    {% set descriptionTest = currentDescription == desiredDescription %}

                    {% if (datatypeTest == false or 
                            nullableTest == false  or
                            defaultValueTest == false or
                            descriptionTest == false) %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                        {% if nsVariables.colchanges == 1 %}
                            {{ stage('Change Column Attributes') }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            MODIFY
                        {% endif %}
                        {% if datatypeTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            SET DATA TYPE {{ desiredDatatype }}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        {% if nullableTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            {% if currentNullable == true %}
                                SET
                            {% else %}
                                DROP
                            {% endif %}
                            NOT NULL
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        {% if descriptionTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            COMMENT '{{ desiredDescription |escape }}'
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        {% if defaultValueTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            {% if desiredDefaultValue == '' %}
                                DROP DEFAULT
                            {% else %}
                                SET DEFAULT {{ desiredDefaultValue }}
                            {% endif %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}

                        {# Metadata changes detected #}
                        {% set nsMetaVariables.metaDataChanged = true %} 
                        
                    {% else %}
                                            
                    {% endif %}
                {% endif %}
            {% endfor %}
            
            {# Figure out cluster key #}
            {% set nsVariables = namespace(finalClusterKey="") %}
            {% if clusterTest == false %}
                {% if desiredState.config.clusterKeyExpressions == true %}
                    {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                    {%- set nsVariables = namespace(clusterValues=[]) %}

                    {% for r in column %}
                        {% if expression[loop.index0] == "" %}
                            {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                        {% else %}
                            {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                {% elif desiredState.config.clusterKey == true %}

                    {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                    {%- set nsVariables = namespace(clusterValues=[]) %}

                    {% for r in column %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                    {% endfor %}

                    {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                
                {% else %}

                    {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                {% endif %}

                {{ stage('Recluster TABLE') }}
                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                {{ nsVariables.finalClusterKey }}

                {# Metadata changes detected #}
                {% set nsMetaVariables.metaDataChanged = true %} 
            {% endif %}

            {# =========================================================
            Handle undetected metadata changes and Default Update
            ========================================================= #}
            {% if currentState != desiredState and nsMetaVariables.metaDataChanged == false %}
                {{ stage('Metadata Update-Default') }}
                select 1=0
            {% endif %}
        {% endif %}


    {% endif %}

{% elif currentState != undefined and desiredState == undefined %}

    {# Table or View Name #}
    {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
    
    {% if currentState.node.materializationType == 'view' %}

     {{ stage('Drop Table or View') }}
     DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

    {% else %}
     
       {{ stage('Drop ' + currentState.node.materializationType ) }}
       DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

    {% endif %}

{% endif %}